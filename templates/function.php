<main>
    <h1>Функции</h1>
    <section>
        <h2>Слайд 15</h2>
        <section>
            <h3>1.Создать функцию, которая сравнивает два числа и возвращает наибольшее.
            </h3>
            <p>Решение:</p>
            <?php
            function max_number($num1, $num2)
            {
                if ($num1 > $num2) {
                    return $num1;
                } else {
                    return $num2;
                }
            }

            // Пример использования функции
            $num1 = 10;
            $num2 = 20;
            echo "\$num1 = $num1<br>";
            echo "\$num2 = $num2<br>";
            echo "Наибольшее число: " . max_number($num1, $num2);

            ?>
        </section>
        <section>
            <h3>2.Создать функцию, которая принимает длину двух катетов и возвращает значение гипотенузы прямоугольного
                треугольника.
            </h3>
            <p>Решение:</p>
            <?php
            function calculate_hypotenuse($side1, $side2)
            {
                // Используем теорему Пифагора для вычисления гипотенузы
                $hypotenuse = sqrt($side1 ** 2 + $side2 ** 2);
                return $hypotenuse;
            }

            // Пример использования функции
            $side1 = 3;
            $side2 = 4;
            echo "Гипотенуза треугольника с катетами $side1 и $side2 равна: " . calculate_hypotenuse($side1, $side2);
            ?>
        </section>
        <section>
            <h3>3.Создать функцию, которая принимает одно число (10). В функции создать цикл, который будет увеличивать
                число в 10 раз и выводить его на экран. Когда число будет больше 1 000 000, на экране должно появляться
                сообщение, что вы достигли предела.

            </h3>
            <p>Решение:</p>
            <?php
            function increase_until_limit($number)
            {
                while ($number < 1000000) {
                    $number *= 10;
                    echo "Текущее число: $number<br>";
                }
                echo "Достигнут предел.";
            }

            // Пример использования функции
            $start_number = 10;
            increase_until_limit($start_number);
            ?>
        </section>
    </section>
    <section>
        <h2>Слайд 16</h2>
        <section>
            <h3>4.Создать функцию, в которой объявляется массив и случайными элементами.
            </h3>
            <p>Решение:</p>
            <?php
            function create_random_array()
            {
                // Определяем случайное количество элементов в массиве (от 1 до 10)
                $length = mt_rand(1, 10);

                // Создаем пустой массив
                $random_array = array();

                // Заполняем массив случайными числами
                for ($i = 0; $i < $length; $i++) {
                    // Генерируем случайное число и добавляем его в массив
                    $random_array[] = mt_rand();
                }

                // Возвращаем созданный массив
                return $random_array;
            }

            // Пример использования функции
            $my_array = create_random_array();
            // Выводим массив на экран для просмотра его содержимого
            print_r($my_array);

            ?>
        </section>
        <section>
            <h3>5.Создать функцию, которая принимает массив и возвращает среднеарифметическое значение массива.
            </h3>
            <p>Решение:</p>
            <?php
            function calculate_average($arr)
            {
                // Проверяем, что массив не пустой
                if (empty($arr)) {
                    return "Массив пустой";
                }

                // Выводим массив для просмотра его содержимого
                echo "Массив: ";
                print_r($arr);

                // Суммируем все элементы массива
                $sum = array_sum($arr);

                // Вычисляем количество элементов в массиве
                $count = count($arr);

                // Вычисляем среднее арифметическое
                $average = $sum / $count;

                // Возвращаем среднее арифметическое
                return $average;
            }

            // Пример использования функции
            $array = [1, 2, 3, 4, 5];
            echo "Среднее арифметическое: " . calculate_average($array);
            ?>
        </section>
        <section>
            <h3>6.Создать функцию, которая принимает строку. Вернуть количество слов в строке.
            </h3>
            <p>Решение:</p>
            <?php
            function count_words($string)
            {
                // Выводим исходную строку
                echo "Исходная строка: " . $string . "<br>";

                // Удаляем лишние пробелы в начале и в конце строки
                $string = trim($string);

                // Если строка пустая, возвращаем 0
                if (empty($string)) {
                    return 0;
                }

                // Разбиваем строку на слова с помощью пробелов как разделителя
                $words = explode(" ", $string);

                // Подсчитываем количество полученных слов
                $word_count = count($words);

                // Возвращаем количество слов
                return $word_count;
            }

            // Пример использования функции
            $string = "Это пример строки для тестирования функции подсчета слов.";
            echo "Количество слов в строке: " . count_words($string);
            ?>
        </section>
        <section>
            <h3>7.Написать функцию, которая рассчитывает последовательность чисел Фибоначчи.
            </h3>
            <p>Решение:</p>
            <?php
            /*Последовательность чисел Фибоначчи - это числовая последовательность, где каждое следующее число в
            последовательности является суммой двух предыдущих чисел. Формально она определяется рекуррентным соотношением:
            F(n) = F(n-1) + F(n-2)
            где F(n) - n-е число в последовательности Фибоначчи, F(0) = 0 и F(1) = 1.
            Таким образом, начиная с нулевого и первого числа (0 и 1), последующие числа будут равны:
            [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...]
             Каждое число в этой последовательности получается путем сложения двух предыдущих чисел.
            Эта последовательность названа в честь итальянского математика Леонардо Пизанского,
            который был известен как Фибоначчи.*/
            // Объявление функции fibonacci
            function fibonacci($n)
            {
                // Создание массива для хранения последовательности чисел Фибоначчи
                $fib = array();
                // Установка начальных значений для первых двух чисел Фибоначчи
                $fib[0] = 0;
                $fib[1] = 1;
                //Запускаем цикл for, начиная с индекса 2 (так как первые два числа уже определены)
                for ($i = 2; $i < $n; $i++) {
                    // Рекуррентное соотношение Фибоначчи: F(n) = F(n-1) + F(n-2)
                    $fib[$i] = $fib[$i - 1] + $fib[$i - 2];
                }

                // Возвращение массива с последовательностью чисел Фибоначчи
                return $fib;
            }

            // Пример использования функции для вывода первых 10 чисел Фибоначчи
            $Fibonacci_number_row = fibonacci(10);
            echo "Последовательность чисел Фибоначчи: " . implode(", ", $Fibonacci_number_row);
            ?>
        </section>
    </section>
    <section>
        <h2>Слайд 17</h2>
        <section>
            <h3>1.Создайте функцию, которая принимает одномерный массив и возвращает массив, заполненный случайными
                числами.
            </h3>
            <p>Решение:</p>
            <?php
            function fill_with_random_numbers($array_length)
            {
                $random_array = array();
                for ($i = 0; $i < $array_length; $i++) {
                    // Генерируем случайное число и добавляем его в массив
                    $random_array[] = mt_rand();
                }
                return $random_array;
            }

            // Пример использования функции
            $array_length = 10; // длина массива
            $random_array = fill_with_random_numbers($array_length);

            // Выводим массив на экран для просмотра его содержимого
            echo "Массив, заполненный случайными числами: ";
            print_r($random_array);
            ?>
        </section>
        <section>
            <h3>2.Дана строка «HTML, CSS, PHP, BITRIX». Написать функцию, которая определит количество слов строке.
            </h3>
            <p>Решение:</p>
            <?php
            function count_words_in_string($string)
            {
                // Выводим исходную строку для просмотра ее содержимого
                echo "Исходная строка: " . $string . "<br>";

                // Разбиваем строку на слова с помощью пробелов как разделителя
                $words = explode(" ", $string);

                // Подсчитываем количество слов
                $word_count = count($words);

                // Возвращаем количество слов
                return $word_count;
            }

            // Пример использования функции
            $string = "HTML, CSS, PHP, BITRIX";
            echo "Количество слов в строке: " . count_words_in_string($string);
            ?>
        </section>
        <section>
            <h3>3.Дана строка «HTML, CSS, PHP, BITRIX». Написать функцию, которая выведет в обратном порядке буквы
                («XIRTIB ,PHP … »).
            </h3>
            <p>Решение:</p>
            <?php
            function reverse_string_letters($string)
            {
                // Выводим исходную строку для просмотра ее содержимого
                echo "Исходная строка: " . $string . "<br>";

                // Разбиваем строку на отдельные символы
                $letters = str_split($string);

                // Переворачиваем массив символов
                $reversed_letters = array_reverse($letters);

                // Объединяем символы обратно в строку
                $reversed_string = implode("", $reversed_letters);

                // Возвращаем перевернутую строку
                return $reversed_string;
            }

            // Пример использования функции
            $string = "HTML, CSS, PHP, BITRIX";
            echo "Строка в обратном порядке: " . reverse_string_letters($string);

            ?>
        </section>
        <section>
            <h3>4.Дана строка «HTML, CSS, PHP, BITRIX». Написать функцию, которая выводит на экран длину строки.

            </h3>
            <p>Решение:</p>
            <?php
            function print_string_length($string)
            {
                // Выводим строку
                echo "Строка: " . $string . "<br>";

                // Получаем длину строки с помощью функции mb_strlen()
                $length = mb_strlen($string);

                // Выводим длину строки на экран
                echo "Длина строки: " . $length;
            }

            // Пример использования функции
            $string = "HTML, CSS, PHP, BITRIX";
            print_string_length($string);
            ?>
        </section>
        <section>
            <h3>5.Дана строка «HTML, CSS, PHP, BITRIX». Написать функцию, которая выводит каждую букву на новую строку
            </h3>
            <p>Решение:</p>
            <?php
            function print_string_and_each_letter_new_line($string) {
                // Удаляем запятые из строки
                $string = str_replace(",", "", $string);

                // Выводим строку
                echo "Строка: " . $string . "<br>";

                // Проходимся по каждому символу строки
                for ($i = 0; $i < mb_strlen($string); $i++) {
                    // Получаем очередной символ
                    $letter = mb_substr($string, $i, 1);
                    // Выводим символ на новой строке
                    echo $letter . "<br>";
                }
            }

            // Пример использования функции
            $string = "HTML, CSS, PHP, BITRIX";
            print_string_and_each_letter_new_line($string);


            ?>
        </section>
    </section>
    </section>
</main>

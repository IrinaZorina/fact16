<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Строки</title>
    <link rel = "stylesheet" href="assets/styles/styleBackground.css">
</head>
<body>
<?php
    include_once "function.php";
    include_once "getTime.php";
    GetClassBody($hours);
    include_once "header.php";
?>
<main>
    <?php
        echo "<h1 $colorClassText>Задания из файла example</h1>";
        echo "<h1 $colorClassText>Блок 6. Строки</h1>";
        echo "<p $colorClassText>";

        echo "<br>1.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в алфавитном порядке последние слова всех предложений.
         Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
         слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";

        $text = "Дан текст, состоящий из строк. Необходимо вывести в алфавитном порядке последние слова всех предложений. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв, перенос слов по слогам отсутствует.<br> Дан текст, состоящий из строк. Необходимо вывести в обратном алфавитном порядке первые  слова всех предложений. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв, перенос слов по слогам отсутствует.";

        echo "Текст: <strong>".$text."</strong>";
        //получение последнего слова
        function GetWord($str, $word = -1):string
        {
            $value = explode(" ", $str);
            if ($word == -1)
            {
                return $value[count($value)-1];
            }
            else
            {
                for ($index = 0; $index < count($value); $index++)
                {
                    if ($value[$index] != "" && $value[$index] != " " && strpos($str,"<br>",  $index) < -1)
                    {
                        return $value[$index];
                    }
                }
            }
            return "";
        }
        //получение последнего слова в каждом предложении
        $arrString = explode(".",$text);
        $arrNew = array();
        for ($index = 0; $index < count($arrString); $index++)
        {
            if ($arrString[$index] == "") continue;
            $arrNew[] = GetWord($arrString[$index]);
        }
        //сортировка
        sort($arrNew);
        //вывод полученного массива
        echo "<br><br>Последние слова в алфавитном порядке:<br>";
        WriteArr($arrNew);

        echo "<br>2.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в обратном алфавитном порядке первые слова всех предложений.
        Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
        слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arrNew = array();
        for ($index = 0; $index < count($arrString); $index++)
        {
            if ($arrString[$index] == "") continue;
            $value = GetWord($arrString[$index], 1);
            if ($value == "") continue;
            $arrNew[] = $value;
        }
         //сортировка
        rsort($arrNew);
        //вывод полученного массива
        echo "<br>Первые слова в обратном алфавитном порядке:<br>";
        WriteArr($arrNew);


        echo "<br>3.	Дан текст, состоящий из 2 строк с максимальной длиной 80 символов. Необходимо вывести в алфавитном порядке слова,
         присутствующие в обеих строках одновременно. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
         слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arrNew = array();
        $arrStr = explode("<br>", $text);
        $arr1 = explode(" ",(string)($arrStr[0]));
        //поиск слова в строке
        function GetWordInStr(string $value, string $str):bool
        {
            $result = str_contains($str,(string)$value);
            return $result;
        }
        //перебор слов 1 строки 
        foreach($arr1 as $key =>  $value)
        {
            $value = str_replace(" ", "", $value);
            if ($value == "" || $value == " ") unset($arr1[$key]);
            //поиск слов во второй
            if (GetWordInStr($value, $arrStr[1]))
            {
                $arrNew[] = $value;
            }
        }
        sort($arrNew);
        echo "Присутствуют слова: ";
        WriteArr($arrNew);

        echo "<br>4.	Дан текст, состоящий из 2 строк с максимальной длиной 80 символов. Необходимо вывести в обратном алфавитном порядке те слова,
         которые не присутствуют в обеих строках одновременно. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
          слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arrNew = array();
        $arrNew1 = array();
        $arrStr = explode("<br>", $text);
        $arr1 = preg_split("/[ .,]/",$arrStr[0]);
        $arr2 = preg_split("/[ .,]/",$arrStr[1]);
        //перебор слов в 1 строке
        foreach($arr1 as $key => $value)
        {
            //поиск слов во 2 строке
            if (GetWordInStr((string)$value, (string)$arrStr[1]) === false)
            {
                $arrNew[$key] = $value;
            }
        }
        //перебор слов в 2 строке
        foreach($arr2 as  $key => $value)
        {
            //поиск слов во 1 строке
            if (GetWordInStr($value, (string)$arrStr[0])  === false)
            {
                $arrNew1[$key] = $value;
            }
        }
        rsort($arrNew);
        echo "Отсутствуют слова: <br>";
        WriteArr($arrNew, true);
        WriteArr($arrNew1, true);

        //получение массива строк
        function GetOffer($string):array 
        {
            $arr = explode(".", $string);
            return $arr;
        }
        //получение строк
        $arr = GetOffer($text);
        $newArr = array();
        //подсчет длины строки
        foreach($arr as $key => $value)
        {
            $value = trim($value,"<br>");
            if ($value == "") continue; 
            $newArr[] = [mb_strlen($value), $value];
        }
        //сортировака массива
        sort($newArr);
        //вывод результата на экран
        WriteDoubleArr($newArr);

        echo "<br>6.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в обратном алфавитном порядке те слова,
        где количество гласных превышает количество согласных. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
        слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        //получение слова из массива
        function GetWordOne($arr, $index):string
        {
            if ($index >= count($arr)) return "";
            $value = trim($arr[$index],"<br>");
            return $value;
        }
        $arr = explode(" ", $text);
        $newArr = array();
        //определение количества гласных и согласных, их сравнение
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr, $index);
            $countV = 0;
            $countG = 0;
            $arrChar = mb_str_split($str);
            //определение количества гласных и согласных
            foreach($arrChar as $key => $value)
            {
                $res = str_contains("уеаояию", $value);              
                if ($res)
                {
                    $countV++;
                }
                else 
                {
                    $countG++;
                }
            }
            //проверка количества гласных
            if ($countV > $countG)
            {
                $newArr[] = $str;
            }
        }
        rsort($newArr);
        WriteArr($newArr);

        echo "<br>7.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в алфавитном порядке те слова,
         где количество согласных превышает количество гласных. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
         слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arr = explode(" ", $text);
        $newArr = array();
        //определение количества гласных и согласных, их сравнение
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr, $index);
            $countV = 0;
            $countG = 0;
            $arrChar = mb_str_split($str);
            //определение количества гласных и согласных
            foreach($arrChar as $key => $value)
            {
                $res = str_contains("уеаояию", $value);              
                if ($res)
                {
                    $countV++;
                }
                else 
                {
                    $countG++;
                }
            }
            //проверка количества согласных
            if ($countV < $countG)
            {
                $newArr[] = $str;
            }
        }
        sort($newArr);
        WriteArr($newArr);

        echo "<br>8.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в алфавитном порядке те слова,
         длина которых превышает K символов. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
         слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $k = 4;
        $arr = explode(" ", $text);
        $newArr = array();
        //определение длины слов, их сравнение
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr, $index);
            if (mb_strlen($str) > $k)
            {
                $newArr[] = $str;
            }
        }
        sort($newArr);
        WriteArr($newArr);


        echo "<br>9.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в обратном алфавитном порядке те слова,
        длина которых не превышает K символов. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
        слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $k = 5;
        $arr = explode(" ", $text);
        $newArr = array();
        //определение длины слов, их сравнение
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr, $index);
            if (mb_strlen($str) < $k && mb_strlen($str) > 0)
            {
                $newArr[] = $str;
            }
        }
        rsort($newArr);
        WriteArr($newArr);

        echo "<br>10.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в обратном алфавитном порядке те слова,
        последняя буква которых является гласной. Считать, текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
         слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arr = explode(" ", $text);
        $newArr = array();
        //определение гласных букв в конце слов
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr, $index);
            if ($str == "") continue;
            $char = str_split($str);
            //определение гласных букв
            $res = str_contains("уеаояию", $char[count($char)-1]);
            if ($res)
            {
                $newArr[] = $str;
            }
        }
        rsort($newArr);
        WriteArr($newArr);

        echo "<br>11.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в алфавитном порядке те слова,
         последняя буква которых является согласной. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
          слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arr = explode(" ", $text);
        $newArr = array();
        //определение согласных букв в конце слов
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr, $index);
            if ($str == "") continue;
            $char = str_split($str);
            //определение согласных букв
            $res = str_contains("уеаояию", $char[count($char)-1]);
            if (!$res)
            {
                $newArr[] = $str;
            }
        }
        sort($newArr);
        WriteArr($newArr);

        echo "<br>12.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в алфавитном порядке те слова,
        первая буква которых является согласной, а последняя гласной. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
        слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arr = explode(" ", $text);
        $newArr = array();
        //определение согласных букв в начале слов
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr, $index);
            if ($str == "") continue;
            $char = str_split($str);
            //определение согласных букв
            $res = str_contains("уеаояию", $char[0]);
            if (!$res)
            {
                $newArr[] = $str;
            }
        }
        rsort($newArr);
        WriteArr($newArr);

        echo "<br>13.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. 
        Необходимо вывести в алфавитном порядке предпоследние слова всех предложений.
        Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв, перенос слов
        по слогам отсутствует, минимальная длина предложений — два слова. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arr = explode(" ", $text);
        $newArr = array();
        //определение предпоследних слов
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr, $index);
            if ($str == "") continue;
            $res = str_contains($str,"." );
            if ($res)
            {
                //получение предпоследнего слова
                $i = $index-1; 
                $str = GetWordOne($arr, $i);
                //проверка, чтобы строка не была пусстой, если пустая - беду предыдущий элемент
                while ($str == "")
                {
                    $i--;
                    if ($i < 0 || $i > count($arr))
                    $str = GetWordOne($arr, $i);                    
                }
                $newArr[] = $str;
            }
        }
        sort($newArr);
        WriteArr($newArr);

        echo "<br>14.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в алфавитном порядке вторые слова всех предложений.
        Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв,
        перенос слов по слогам отсутствует, минимальная длина предложений — два слова. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arr = explode(".", $text);
        $newArr = array();
        //определение второго слова
        for ($index = 0; $index < count($arr); $index++)
        {
            //разбиение предложения на слова
            $arrStr = preg_split("/[ .,]/",$arr[$index]);
            $isSertch = false; //флаг найденого 1 слова (при нескольких пробелах выносит пустоту между ними в отдельный элемент массива, )
            for ($indexWord = 0; $indexWord < count($arrStr); $indexWord++)
            {
                $str = GetWordOne($arrStr, $indexWord);       
                //при найденом 1 слове и не пустом слове - считается, что 2 слово найдено
                if ($isSertch && $str != "")
                {
                    $newArr[] = $str;
                    break;
                }
                if ($str != "")
                {
                    $isSertch = true;
                }  
            }
        }
        sort($newArr);
        WriteArr($newArr);

        echo "<br>15.	Дан текст, состоящий из 3-х строк с максимальной длиной 80 символов. Необходимо вывести в обратном алфавитном порядке те слова,
        которые присутствуют в 3-й строке и не присутствуют в первых двух. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания
        используются точка и запятая, слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $text .= "<br>Дан текст, состоящий из трех строк. Необходимо вывести в обратном алфавитном порядке те слова, которые присутствуют в 3-й строке и не присутствуют в первых двух. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию";
        echo "Текст: <strong>".$text."</strong><br>";
        //разбиение по предложениям
        $arr = explode("<br>", $text);
        $newArr = array();
        //разбиение 3 предложения по строчкам
        $arrStr2 = preg_split("/[ .,]/",$text);
        for ($index = 0; $index < count($arrStr2); $index++)
        {
            //получение проверяемого слова
            $str = GetWordOne($arrStr2,$index);
            //проверка вхлждения слова в первые 2 строчки
            if (!str_contains($arr[0],$str) && !str_contains($arr[1],$str))
            {
                $newArr[] = $str;
            }
        }
        rsort($newArr);
        WriteArr($newArr);

        echo "<br>16.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в алфавитном порядке слова, начинающиеся с прописных букв.
         Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв,
         перенос слов по слогам отсутствует. Для выделения слов из строки создать пользовательскую функцию.<br>";
        $arr = preg_split("/[ .,]/",$text);
        $newArr = array();
        for ($index = 0; $index < count($arr); $index++)
        {
            //получение проверяемого слова
            $str = GetWordOne($arr,$index);
            if ($str == "") continue;
            $firstChar = mb_str_split($str);
            //проверка на заглавную букву в первом символе
            $res = preg_match("/[А-Я]/",$firstChar[0]);
            if (!$res)
            {
                $newArr[] = $str;
            }
        }
        sort($newArr);
        WriteArr($newArr);

        echo "<br>17.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести в обратном алфавитном порядке слова, являющиеся палиндромами.
        Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв,
        перенос слов по слогам отсутствует. Для выделения слов из строки и определения является ли они палиндромами, создать пользовательские функции.<br>";
        $arr = preg_split("/[ .,]/",$text);
        // $arr = ["qwerty", "qwewq", "qqqq"];
        $newArr = array();
        //определение полиндрома
        function CheckedPolindrom($str)
        {
            $word1 = mb_str_split($str);
            $word2 = array_reverse($word1);
            return $word1 == $word2;
        }
        //поиск в предложениях полиндромов
        for ($index = 0; $index < count($arr); $index++)
        {
            //получение проверяемого слова
            $str = GetWordOne($arr,$index);
            if ($str == "") continue;
            //определение полиндрома
            $res = CheckedPolindrom($str);
            if ($res)
            {
                $newArr[] = $str;
            }
        }
        rsort($newArr);
        WriteArr($newArr);

        echo "<br>18.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести все предложения данного текста,
        являющиеся палиндромами, в порядке невозрастания их длины. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
         слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения предложений из строки и определения является ли они палиндромами,
         создать пользовательские функции.<br>";
         //получение предложения из строки
         function GetStr($str, $index):string
         {
            $arr = preg_split("/[.]/",$str);
            if ($index >= count($arr)) 
            {
                return ""; 
            }
            else
            {
                return $arr[$index];
            }
        }
        //определение полиндрома
        function CheckedPolindromStr($str)
        {
            $str1 = preg_split("/[ ,]/",$str);
            $str2 = array_reverse($str1);
            return $str1 == $str2;
        }
        $newArr = array();
        $index = 0;
        // $text = "qwerty lkll qwerty. dsf wrfwe wer.qwertyq lkll qwertyq.";
        $str = GetStr($text, $index);
        //поиск полиндромов
        while ($str != "")
        {
            //определение полиндрома
            $res = CheckedPolindromStr($str);
            if ($res)
            {
                //добавление полиндрома с количеством символов
                $newArr[] = [mb_strlen($str), $str];
            }
            $str = GetStr($text, ++$index);
        }
        sort($newArr);
        WriteDoubleArr($newArr);

        echo "<br>19.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести этот текст, зашифрованный кодом Цезаря.
        (Код Цезаря заменяет одну букву другой, отстоящей от нее на заданное количество позиций в алфавите. Например, при сдвиге, равном 1,
        буква А заменяется на Б, Б — на В, …, Я — на А.) Размер сдвига символов принять равным номеру буквы в слове. Например, слово ДОМ — шифруется как ЕРП.
        Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв,
        перенос слов по слогам отсутствует. Для выделения слов из строки и зашифровки слова создать пользовательские функции.<br>";
        //шифрование/дешифорование слова
        function GetShifrWord($str, $code = true)
        {
            $arr = mb_str_split($str);
            $newStr = "";
            $startCharU = mb_ord("А");
            $startCharL = mb_ord("а");
            $finishCharU = mb_ord("Я");
            $finishCharL = mb_ord("я");
            for ($index = 0; $index < count($arr); $index++)
            {
                if ($arr[$index] == " " || $arr[$index] == "," || $arr[$index] == ".")
                {
                    $newStr.=$arr[$index] ;
                    continue;
                }
                //получить символ в строке
                $char = mb_ord($arr[$index]);
                //сдвинуть код символа на его позицию в слове
                $newIndex = ($code) ? $char+$index+1 : $char-$index-1;
                $newChar = mb_chr($newIndex);
                //проверка заглавной или строчной буквы
                if (preg_match("/[А-Я]/u",$arr[$index]))
                {
                    //проверка - кодирование или декодирование
                    if ($code)
                    {
                        //проверка выхода индекса за границы
                        if ($newIndex > $finishCharU)
                        {
                            $newIndex = $startCharU +($index-($finishCharU - $char));
                        }
                    }
                    else 
                    {
                        if ($newIndex < $startCharU)
                        {
                            $newIndex = $finishCharU - ($index-($char - $startCharU));
                        }
                    }
                    //получение нового символа
                    $newChar = mb_chr($newIndex);
                }
                else
                {
                    if ($code)
                    {
                        if ($newIndex > $finishCharL)
                        {
                            $newIndex = $startCharL +($index-($finishCharL - $char));
                        }
                    }
                    else 
                    {
                        if ($newIndex < $startCharL)
                        {
                            $newIndex = $finishCharL - ($index-($char - $startCharL));
                        }
                    }
                    $newChar = mb_chr($newIndex);
                }
                $newStr.=$newChar;
            }
            return $newStr;
        }
        
        //получить слово
        $arr = preg_split("/[ ]/",$text);
        $newStr = "";
        for ($index = 0; $index < count($arr); $index++)
        {
            $str = GetWordOne($arr,$index);
            //вывести зашифрованое слово
            $newStr .= GetShifrWord($str)." ";
        }
        echo "$newStr<br>";
        
        echo "<br>20.	Составить программу для расшифровки текста, зашифрованного в пункте 19. Для выделения слов из строки и расшифровки слова создать пользовательские функции.<br>";
       
        $arr = preg_split("/[ ]/",$newStr);
        $oldStr = "";
        for ($index = 0; $index < count($arr); $index++)
        {
            //получить слово
            $str = GetWordOne($arr,$index);
            //вывести расшифрованое слово
            $oldStr .= GetShifrWord($str, false)." ";
        }
        echo "$oldStr<br>";

        echo "<br>21.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести этот текст, зашифрованный кодом Цезаря.
        (Код Цезаря заменяет одну букву другой, отстоящей от нее на заданное количество позиций в алфавите. Например, при сдвиге, равном 1,
        буква А заменяется на Б, Б — на В, …, Я — на А.) Размер сдвига символов принять равным номеру буквы в предложении. Например, если предложение начинается со слова ДОМ,
        то оно шифруется как ЕРП. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая, слова состоят только из букв,
         перенос слов по слогам отсутствует. Для выделения предложений из текста и зашифровки предложения создать пользовательские функции.<br>";
         $newStr = "";
         $index = 0;
         //получить предложение
        $str = GetStr($text,$index++);
        while ($str != "")
        {
            //вывести зашифрованое предложение
            $newStr .= GetShifrWord($str).".";
            $str = GetStr($text,$index++);
        }
        echo "$newStr<br>";

        echo "<br>22.	Составить программу для расшифровки текста, зашифрованного в пункте 21. Для выделения предложений из текста и расшифровки предложения
        создать пользовательские функции.<br>";
        $oldStr = "";
        $index = 0;
        $str = GetStr($newStr,$index++);
        while ($str != "")
        {
            //вывести зашифрованое предложение
            $oldStr .= GetShifrWord($str, false).".";
            $str = GetStr($newStr,$index++);
        }
        echo "$oldStr<br>";

        echo "<br>23.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести этот текст, зашифрованный кодом Цезаря.
        (Код Цезаря заменяет одну букву другой, отстоящей от нее на заданное количество позиций в алфавите. Например, при сдвиге, равном 1,
        буква А заменяется на Б, Б — на В, …, Я — на А.) Размер сдвига символов принять равным остатку от деления длины слова на номер буквы в слове плюс единица.
        Например, слово ДОМ — шифруется как ЕРН. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
        слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения слов из строки и зашифровки слова создать пользовательские функции.<br>";
        //шифрование/дешифорование слова
        function GetShiftDelWord($str, $code = true)
        {
            $newStr = "";
            $arr = mb_str_split($str);
            $startCharU = mb_ord("А");
            $startCharL = mb_ord("а");
            $finishCharU = mb_ord("Я");
            $finishCharL = mb_ord("я");
            $length = count($arr);
            for ($index = 0; $index < count($arr); $index++)
            {
                if ($arr[$index] == " " || $arr[$index] == "," || $arr[$index] == "." || $arr[$index] =="")
                {
                    $newStr.=$arr[$index] ;
                    continue;
                }
                //получить символ в строке
                $char = mb_ord($arr[$index]);
                //сдвинуть код символа на его позицию в слове
                $shift = $length%($index+1)+1;
                $newIndex = ($code) ? $char+ $shift: $char-$shift;        
                $newChar = mb_chr($newIndex);
                //проверка заглавной или строчной буквы
                if (preg_match("/[А-Я]/u",$arr[$index]))
                {
                    //проверка - кодирование или декодирование
                    if ($code)
                    {
                        //проверка выхода индекса за границы
                        if ($newIndex > $finishCharU)
                        {
                            $newIndex = $startCharU +($newIndex-$finishCharU-1);
                        }
                    }
                    else 
                    {
                        if ($newIndex < $startCharU)
                        {
                            $newIndex = $finishCharU - ( $startCharU-$newIndex-1);
                        }
                    }
                    //получение нового символа
                    $newChar = mb_chr($newIndex);
                }
                else
                {
                    if ($code)
                    {
                        if ($newIndex > $finishCharL)
                        {
                            $newIndex = $startCharL +($newIndex-$finishCharL-1);
                        }
                    }
                    else 
                    {
                        if ($newIndex < $startCharL)
                        {
                            $newIndex = $finishCharL - ( $startCharL-$newIndex-1);
                        }
                    }
                    $newChar = mb_chr($newIndex);
                }
                $newStr.=$newChar;
            }
            return $newStr;
        }

        $arr = preg_split("/[ ]/",$text);
        $newStr = "";
        for ($index = 0; $index < count($arr); $index++)
        {
            //получить слово
            $str = GetWordOne($arr,$index);
            //вывести зашифрованое предложение
            $newStr .= GetShiftDelWord($str)." ";
        }
        echo "$newStr<br>";

        echo "<br>24.	Составить программу для расшифровки текста, зашифрованного в пункте 23. Для выделения слов из строки и расшифровки слова создать пользовательские функции.<br>";
        $arr = preg_split("/[ ]/",$newStr);
        $oldStr = "";
        for ($index = 0; $index < count($arr); $index++)
        {
            //получить слово
            $str = GetWordOne($arr,$index);
            //вывести зашифрованое предложение
            $oldStr .= GetShiftDelWord($str, false)." ";
        }
        echo "$oldStr<br>";
        
        echo "<br>25.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести этот текст, зашифрованный кодом Цезаря.
        (Код Цезаря заменяет одну букву другой, отстоящей от нее на заданное количество позиций в алфавите. Например, при сдвиге, равном 1,
        буква А заменяется на Б, Б — на В, …, Я — на А.) Размер сдвига символов принять равным остатку от деления количества слов в предложении на номер буквы в слове плюс единица.
        Например, если в предложении 8 слов, слово ДОМ — шифруется как ЕПР. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются
         точка и запятая, слова состоят только из букв, перенос слов по слогам отсутствует. Для выделения предложений из текста и зашифровки предложения
         создать пользовательские функции.<br>";
        //шифрование/дешифорование предложения
        function GetShiftDelStr($str, $code = true)
        {
            $newStr = "";
            //получение массива слов
            $arr = preg_split("/[ ]/",$str);
            $startCharU = mb_ord("А");
            $startCharL = mb_ord("а");
            $finishCharU = mb_ord("Я");
            $finishCharL = mb_ord("я");
            $length = count($arr);
            //цикл по словам
            for($indexW = 0; $indexW < count($arr); $indexW++)
            {
                //получаем массив букв в слове
                $arrWord = mb_str_split($arr[$indexW]);
                //цикл по буквам
                for ($index = 0; $index < count($arrWord); $index++)
                {
                    //прохожу мимо символов
                    if ($arrWord[$index] == " " || $arrWord[$index] == "," || $arrWord[$index] =="")
                    {
                        $newStr.=$arrWord[$index] ;
                        continue;
                    }
                    //получить символ в строке
                    $char = mb_ord($arrWord[$index]);
                    //сдвинуть код символа на его позицию в слове
                    $shift = $length%($index+1)+1;
                    $newIndex = ($code) ? $char+$shift : $char-$shift;        
                    $newChar = mb_chr($newIndex);
                    //проверка заглавной или строчной буквы
                    if (preg_match("/[А-Я]/u",$arrWord[$index]))
                    {
                        //проверка - кодирование или декодирование
                        if ($code)
                        {
                            //проверка выхода индекса за границы
                            if ($newIndex > $finishCharU)
                            {
                                $newIndex = $startCharU +($newIndex-$finishCharU-1);
                            }
                        }
                        else 
                        {
                            if ($newIndex < $startCharU)
                            {
                                $newIndex = $finishCharU - ( $startCharU-$newIndex-1);
                            }
                        }
                        $newChar = mb_chr($newIndex);
                    }
                    else
                    {
                        if ($code)
                        {
                            if ($newIndex > $finishCharL)
                            {
                                $newIndex = $startCharL +($newIndex-$finishCharL-1);
                            }
                        }
                        else 
                        {
                            if ($newIndex < $startCharL)
                            {
                                $newIndex = $finishCharL - ( $startCharL-$newIndex-1);
                            }
                        }
                        $newChar = mb_chr($newIndex);
                    }
                    $newStr.=$newChar;
                }
                if ($indexW < count($arr) -1) $newStr.= " ";
            }
            return $newStr;
        }
        
        $newStr = "";
        $index = 0;
        //получить предложение
        $str = GetStr($text,$index++);
        while ($str != "")
        {
            //вывести зашифрованое предложение
            $newStr .= GetShiftDelStr($str).".";
            //получить предложение
            $str = GetStr($text,$index++);
        }
        echo "$newStr<br>";

        echo "<br>26.	Составить программу для расшифровки текста, зашифрованного в пункте 25. Для выделения предложений из текста и расшифровки предложения создать
         пользовательские функции.<br>";
        $oldStr = "";
        $index = 0;
        //получить предложение
        $str = GetStr($newStr,$index++);
        while ($str != "")
        {
            //вывести зашифрованое предложение
            $oldStr .= GetShiftDelStr($str, false).".";
            //получить предложение
            $str = GetStr($newStr,$index++);
        }
        echo "$oldStr<br>";

        echo "<br>27.	Дан текст, состоящий из N (2≤N≤10) строк с максимальной длиной 80 символов. Необходимо вывести этот текст, зашифрованный кодом Цезаря.
        (Код Цезаря заменяет одну букву другой, отстоящей от нее на заданное количество позиций в алфавите. Например, при сдвиге, равном 1,
         буква А заменяется на Б, Б — на В, …, Я — на А.) Размер сдвига символов принять равным сумме сдвигов двух предыдущих букв. Для первой буквы принять сдвиг равным 0,
         а для второй — 1. Например, слово КОШКА — шифруется как КПЩМГ. Считать, что текст написан синтаксически грамотно, в качестве знаков препинания используются точка и запятая,
         слова состоят только из букв, перенос слов по слогам отсутствует.<br>";
        //шифрование/дешифорование предложения
        function GetShiftFib($str, $code = true)
        {
            $newStr = "";
            //получение массива слов
            $arr = mb_str_split($str);
            $startCharU = mb_ord("А");
            $startCharL = mb_ord("а");
            $finishCharU = mb_ord("Я");
            $finishCharL = mb_ord("я");
            $oldShift0 = 0;
            $oldShift1 = 1;
            $diap = $finishCharL-$startCharL+1;
            //цикл по символам
            for ($index = 0; $index < count($arr); $index++)
            {
                //прохожу мимо символов
                if ( $arr[$index] =="" || $arr[$index] ==" " || $arr[$index] ==","||$arr[$index] ==".")
                {
                    $newStr.=$arr[$index] ;
                    continue;
                }
                //получить символ в строке
                $char = mb_ord($arr[$index]);
                //проверяю индекс символа и сдвигаю его на сумму предыдущих сдвигов
                if ($index == 0)
                {
                    $shift = $oldShift0;
                }
                elseif ($index == 1)
                {
                    $shift = $oldShift1;
                }
                else 
                {            
                    $shift = ($oldShift0+$oldShift1) % $diap;
                    //обновляю сдвиги
                    $oldShift0 = $oldShift1;
                    $oldShift1 = $shift;
                }
                $newIndex = ($code) ? $char+$shift : $char-$shift;  
                //проверка заглавной или строчной буквы
                if (preg_match("/[А-Я]/u",$arr[$index]))
                {
                    //проверка - кодирование или декодирование
                    if ($code)
                    {
                        //проверка выхода индекса за границы
                        if ($newIndex > $finishCharU)
                        {
                            $newIndex = $startCharU + ($newIndex-$startCharU)%$diap;
                        }
                    }
                    else 
                    {
                        if ($newIndex < $startCharU)
                        {
                            $newIndex = $finishCharU - ($finishCharU-$newIndex)%$diap;
                        }
                    }
                }
                else
                {
                    if ($code)
                    {
                        if ($newIndex > $finishCharL)
                        {
                            $newIndex = $startCharL + ($newIndex-$startCharL)%$diap;
                        }
                    }
                    else 
                    {
                        if ($newIndex < $startCharL)
                        {
                            $newIndex = $finishCharL -  ($finishCharL-$newIndex)%$diap;
                        }
                    }
                }
                $newChar = mb_chr($newIndex);
                $newStr.=$newChar;
            }
            return $newStr;
        }
        $newStr = "";
        //вывести зашифрованое предложение
        $newStr .= GetShiftFib($text);
        echo "$newStr<br>";
        
        echo "<br>28.	Составить программу для расшифровки текста, зашифрованного в пункте 29. Для выделения слов из строки и расшифровки слова создать пользовательские  функции.<br>";
        $oldStr = "";
        //вывести зашифрованое предложение
        $oldStr .= GetShiftFib($newStr,false);
        echo "$oldStr<br>";
        echo "</p>";
    ?>
</main>
<?php
    include_once "footer.php";
?>
</body>
</html>